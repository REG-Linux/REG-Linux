#!/bin/bash

# Get latest release from GitHub api
get_latest_release() {
  curl --silent "https://api.github.com/repos/$1/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/'
}

# Create upgrade messages for the badge (TERMINAL=0) or plain text output
do_upgmsg() {
    if [ "$TERMINAL" -eq 0 ]; then
        echo "$1" > "/tmp/upgrade_message.txt"
        [ -n "$2" ] && sleep "$2"
    else
        echo "$1"
    fi
}

do_badgeines() {
    TARVAL=$1
    COUNT=0
    while true
    do
        if [ -f "/tmp/upgrade_message.txt" ]; then
            [ $COUNT -gt 100 ] && COUNT=0
            MSG_STRING=$(cat "/tmp/upgrade_message.txt")
            echo "$MSG_STRING>>>$COUNT"
            COUNT=$((COUNT+5))
            sleep 0.1
        else
            CURVAL=$(stat --printf="%s" "$UPGRADEFILE")
            CURVAL=$((CURVAL / 1024 / 1024))
            PER=$((CURVAL * 100 / TARVAL))
            echo "$CURVAL of $TARVAL MB downloaded ... >>> ${PER}%"
            sleep 5
        fi
    done
}

do_download() {
    UPGRADEFILE="${UPGRADEFOLDER}/boot-${board}.tar.zst"
    # Make sure upgrade folder does not have other updates leftovers
    rm -rf "${UPGRADEFOLDER}"
    mkdir -p "$UPGRADEFOLDER"

    echo "url: ${url}"
    size=$(curl -A "system-upgrade.header" -sfIL "${url}" | grep -i "Content-Length: " | tail -1 | sed -e s+'^Content-Length: \([0-9]*\).*$'+'\1'+I) # take the last one in case of redirection
    size=$((size / 1024 / 1024))
    [ "$?" -eq 0 ] || quit_script 1
    echo "need to download ${size}mb"

    # Check free space on "${SHAREMOUNT}"
    freespace=$(df -m "${SHAREMOUNT}" | tail -1 | awk '{print $4}')
    [ "$?" -eq 0 ] || quit_script 1
    if [ "${size}" -ge "${freespace}" ]; then
        # -ge instead of -gt to give a tiny margin for error in space calculation
        echo "Not enough space on \"${SHAREMOUNT}\" to perform the update"
        quit_script 1
    fi

    # Up to this the GUI was not used, now do_upgmsg will automatically decide which output to use
    if [ "$TERMINAL" -eq 0 ]; then
        # download inside ES with badge
        touch "$UPGRADEFILE"
        do_badgeines "${size}" &
        GETPERPID=$!
        curl -A "system-upgrade" -sfL "${url}" -o "$UPGRADEFILE" || quit_script 1
        do_upgmsg "Checking integrity of downloaded file..."
    else
        # download inside SSH or terminal
        curl -A "system-upgrade" -fL "${url}" -o "$UPGRADEFILE" || quit_script 1
        echo "Checking integrity of downloaded file... please wait"
    fi

    # try to download an md5 checksum, delete possible leftover if any error
    curl -A "system-upgrade.md5" -sfL "${url}.md5" -o "${UPGRADEFILE}.md5" || rm -f "${UPGRADEFILE}.md5"
}

quit_script() {
    # Exit code in $1

    # exit from ES-badge without additional messages
    [ "$TERMINAL" -eq 0 ] && [ -n "${GETPERPID}" ] && kill -9 "${GETPERPID}"

    exit $1
}

# started from Terminal/SSH (TERMINAL=1) or from ES (TERMINAL=0)
[ -t 1 ] && TERMINAL=1 || TERMINAL=0

# ---- MAIN ----
echo "Starting upgrade process..."

board=$(cat /boot/boot/system.board)
updatetype="$(/usr/bin/system-settings-get updates.type)"
# force a default value in case the value is removed or miswritten
[ "${updatetype}" != "beta" ] && updatetype="stable"

# Force the update file to be stored in "share_internal"
# Check if share_internal is already mounted (test /userdata first because sometimes is also mounted under /media)
SHAREPART="$(system-part share_internal)"
SHAREMOUNT=$(grep -m 1 -E "^${SHAREPART} /userdata " /proc/mounts | awk '{print $2}')

# Maybe is mounted some other place...
[ -z "$SHAREMOUNT" ] && SHAREMOUNT=$(grep -m 1 -E "^${SHAREPART} " /proc/mounts | awk '{print $2}')
# If not, we need to mount
if [ -z "$SHAREMOUNT" ]; then
    # Not mounted, do mount
    SHAREMOUNT="/media/SHARE"
    mkdir -p "${SHAREMOUNT}"
    PARTTYPE=$(blkid -o value -s TYPE "${SHAREPART}")
    system-mount "${PARTTYPE}" 1 "${SHAREPART}" "${SHAREMOUNT}" || quit_script 1
fi

UPGRADEFOLDER="${SHAREMOUNT}/system/upgrade"

case $1 in
    dev)
        if [ -n "$2" ]; then
            url="$2/boot-${board}.tar.zst"
        else
            url="https://updates.reglinux.org/dev/${board}/boot-${board}.tar.zst"
        fi

        if [[ $(curl -Is "$url" | head -n 1) ]]; then
            do_download
        else
            echo "Error: File ${url} not found."
            quit_script 1
        fi
    ;;
    manual)
        # Check if the local file exists
        if [ -f "/userdata/system/upgrade/boot-${board}.tar.zst" ]; then
            size=$(du -m "/userdata/system/upgrade/boot-${board}.tar.zst" | awk '{print $1}')
            echo "Using local file: /userdata/system/upgrade/boot-${board}.tar.zst (${size}MB)"
            # If in manual mode, .tar.zst is in /userdata, but that can be different from share_internal
            UPGRADEFILE="/userdata/system/upgrade/boot-${board}.tar.zst"
        else
            echo "Error: Local file /userdata/system/upgrade/boot-${board}.tar.zst not found."
            quit_script 1
        fi
    ;;
    *)
        latestrelease=$(system-config canupdate)    # expected string similar to "24.08-beta-1" or just "24.08.0" for stable releases

        if [ -n "$latestrelease" ]        # New releases are available
        then
            url="https://github.com/REG-Linux/REG-Linux/releases/download/${latestrelease}/boot-${board}.tar.zst"
            do_download
        else
            echo "No new release found."
            echo "Current version: $(system-version)"
            echo "Online version: ${latestrelease}"
            quit_script 1
        fi
esac

# confirm that update is for same board
newboard=$(tar --zstd -Oxf "$UPGRADEFILE" 'boot/system.board')
if [ "$board" = "$newboard" ]; then

    if [ -e "${UPGRADEFILE}.md5" ]; then
        DISTMD5=$(cat "${UPGRADEFILE}.md5")
        CURRMD5=$(md5sum "$UPGRADEFILE" | sed -e s+' .*$'++)
        if [ "${DISTMD5}" = "${CURRMD5}" ]; then
            do_upgmsg "Checksum validated ..." 2
        else
            do_upgmsg "Checksum error!" 5
            quit_script 1
        fi
    else
        do_upgmsg "Missing md5 file - proceeding ..." 2
    fi

    if [ "$1" = "manual" ] && [ "$SHAREMOUNT" != "/userdata" ]; then
        # Check free space on "${SHAREMOUNT}"
        freespace=$(df -m "${SHAREMOUNT}" | tail -1 | awk '{print $4}')
        [ $? -eq 0 ] || quit_script 1
        if [ "${size}" -ge "${freespace}" ]; then
            # -ge instead of -gt to give a tiny margin for error in space calculation
            do_upgmsg "Not enough space on \"${SHAREMOUNT}\" to perform the update" 5
            quit_script 1
        fi
        if ! mv "/userdata/system/upgrade/boot-${board}.tar.zst" "${UPGRADEFOLDER}"/
        then
            do_upgmsg "Error moving \"boot-${board}.tar.zst\" to \"${UPGRADEFOLDER}/\"!" 5
            quit_script 1
        fi
    fi

    # remount /boot in rw
    if ! mount -o remount,rw /boot
    then
        do_upgmsg "Error remounting /boot in rw mode!" 5
        quit_script 1
    fi

    # Extract updated rescue files
    # The presence of rescue.update will trigger the remaining updates
    do_upgmsg "Extracting updated rescue files..."

    # In case of tar error we don't know if is tar corrupted or non existing file to extract (assuming an upgrade could not include all files)
    # First get the list of available files of those we want to extract (also is kind of a test for corrupted tar file)
    # We test for boot/reglinux.update but we don't want it extracted now
    # tar --no-same-owner is needed because fat partition does not support owner attributes
    tar --zstd -tf "${UPGRADEFOLDER}/boot-${board}.tar.zst" | grep -E 'boot/firmware.update|boot/initrd.lz4|boot/linux|boot/modules.update|boot/rescue.update|boot/reglinux.update' > /tmp/upgrade.list
    if [ $? -eq 0 ] && tar --zstd -C /boot/ --no-same-owner --exclude='boot/reglinux.update' -xf "${UPGRADEFOLDER}/boot-${board}.tar.zst" --verbatim-files-from -T /tmp/upgrade.list
    then
        do_upgmsg "Rebooting to finish upgrade." 2
        touch /boot/REG_UPDATE
    else
        do_upgmsg "ERROR EXTRACTING UPDATE FILES!" 15
        mount -o remount,ro /boot
        quit_script 1
    fi

    sync
    mount -o remount,ro /boot
    do_upgmsg "Reboot to apply update..."
else
    do_upgmsg "WARNING: update is for ${newboard}, but should be for ${board}!" 5
fi

if [ "$TERMINAL" -eq 0 ]; then
    quit_script 0
else
    reboot
    exit 0
fi