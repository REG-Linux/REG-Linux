#!/bin/bash

# Create upgrade messages for the badge (TERMINAL=0) or plain text output
do_upgmsg() {
    if [ $TERMINAL -eq 0 ]; then
        echo "$1" > /userdata/system/upgrade/upgrade_message.txt
        [ -n "$2" ] && sleep $2
    else
        echo "$1"
    fi
}

do_badgeines() {
    TARVAL=$1
    COUNT=0
    while true
    do
        if [ -f "/userdata/system/upgrade/upgrade_message.txt" ]; then
            [ $COUNT -gt 100 ] && COUNT=0
            MSG_STRING="$(cat /userdata/system/upgrade/upgrade_message.txt)"
            echo "$MSG_STRING>>>$COUNT"
            COUNT=$((COUNT+5))
            sleep 0.1
        else
            CURVAL=$(stat --printf="%s" "/userdata/system/upgrade/boot.tar.zst")
            CURVAL=$((CURVAL / 1024 / 1024))
            PER=$((CURVAL * 100 / TARVAL))
            echo "$CURVAL of $TARVAL MB downloaded ... >>> ${PER}%"
            sleep 5
        fi
    done
}

# ---- MAIN ----
echo "Starting the upgrade..."

# --- Prepare update URLs ---

updateurl="https://updates.reglinux.org"

board=$(cat /boot/boot/batocera.board)
oldboard="$board"
updatetype="$(/usr/bin/batocera-settings-get updates.type)"
settingsupdateurl="$(/usr/bin/batocera-settings-get updates.url)"

# customizable upgrade url website
test -n "${settingsupdateurl}" && updateurl="${settingsupdateurl}"

# force a default value in case the value is removed or miswritten
test "${updatetype}" != "stable" -a "${updatetype}" != "dev" && updatetype="stable"

# custom the url directory
DWD_HTTP_DIR="${updateurl}/${updatetype}/${board}/"

# custom CLI url
test $# -eq 1 && DWD_HTTP_DIR="$1"

# started from Terminal/SSH (TERMINAL=1) or from ES (TERMINAL=0)
[ -t 1 ] && TERMINAL=1 || TERMINAL=0

# --- Prepare file downloads ---

# Check if "manual" argument is provided
if [ "$1" == "manual" ]; then
    # Check if the local file exists
    if [ -f "/userdata/system/upgrade/boot.tar.zst" ]; then
        size=$(du -m "/userdata/system/upgrade/boot.tar.zst" | awk '{print $1}')
        echo "Using local file: /userdata/system/upgrade/boot.tar.zst (${size}MB)"
    else
        echo "Error: Local file /userdata/system/upgrade/boot.tar.zst not found."
        exit 1
    fi
else
    # download directory
    mkdir -p /userdata/system/upgrade || exit 1

    # get size to download
    url="${DWD_HTTP_DIR}/boot.tar.zst"
    echo "url: ${url}"
    headers=$(curl -A "batocera-upgrade.header" -sfIL "${url}")
    test $? -eq 0 || exit 1
    size=$(echo "$headers" | grep -i "Content-Length: " | tail -1 | sed -e s+'^Content-Length: \([0-9]*\).*$'+'\1'+I) # take the last one in case of redirection
    size=$((size / 1024 / 1024))
    test $? -eq 0 || exit 1
    echo "need to download ${size}mb"
fi

# Check free space on /userdata
for fs in $filesystems
do
    freespace=$(df -m "/userdata" | tail -1 | awk '{print $4}')
    test $? -eq 0 || exit 1
    if test "${size}" -gt "${freespace}"
    then
        echo "Not enough space on ${fs} to perform the update"
        exit 1
    fi
done

##### Up to this the GUI was not used, now do_upgmsg will automatically decide which output to use
# download
if [ "$1" != "manual" ]; then
    if [ $TERMINAL -eq 0 ]; then
        # download inside ES with badge
        touch "/userdata/system/upgrade/boot.tar.zst"
        do_badgeines "${size}" &
        GETPERPID=$!
        curl -A "batocera-upgrade" -sfL "${url}" -o "/userdata/system/upgrade/boot.tar.zst" || exit 1
        do_upgmsg "Calculating md5 checksum ..."
    else
        # download inside SSH or terminal
        curl -A "batocera-upgrade" -fL "${url}" -o "/userdata/system/upgrade/boot.tar.zst" || exit 1
        echo "Check proper file download, checking md5sum - please wait"
    fi
fi

# try to download an md5 checksum
if [ "$1" != "manual" ]; then
    curl -A "batocera-upgrade.md5" -sfL "${url}.md5" -o "/userdata/system/upgrade/boot.tar.zst.md5"
fi
if test -e "/userdata/system/upgrade/boot.tar.zst.md5"
then
    DISTMD5=$(cat "/userdata/system/upgrade/boot.tar.zst.md5")
    CURRMD5=$(md5sum "/userdata/system/upgrade/boot.tar.zst" | sed -e s+' .*$'++)
    if test "${DISTMD5}" = "${CURRMD5}"
    then
        do_upgmsg "Checksum validated ..." 2
    else
        do_upgmsg "Checksum error ..." 5
        exit 1
    fi
else
    do_upgmsg "Missing md5 file - proceed ..." 3
fi

# remount /boot in rw
echo "remounting /boot in rw"
if ! mount -o remount,rw /boot
then
    exit 1
fi

# mark /boot as UPDATE mode
do_upgmsg "Rebooting for update mode ..." 0.5
touch /boot/REG_UPDATE
mount -o remount,ro /boot

# a sync with some cleanups of downloaded and created files
sync

# verify update is for same board, provide a warning if not
newboard=$(cat /boot/boot/batocera.board)
if [ "$oldboard" != "$newboard" ]
then
    echo; echo "WARNING: Current board is ${oldboard}, applied update is for ${newboard}"
fi

echo; echo "Rebooting to apply update !"
reboot

# sleep a bit before reboot
sleep 5

# exit from ES-badge without additional messages
[ $TERMINAL -eq 0 ] && exit 0
