#!/bin/bash

### full version (not on login, otherwise you can't log when OpenGL/Vulkan are out of order)
[ "$1" = "--full" ] && FULL_DISPLAY=1 || FULL_DISPLAY=0
###

# Detect battery
BATTERY_DIR=$(find /sys/class/power_supply/ \( -iname '*bat*' -type d \) -or \( -ilname '*bat*' -type l \) -print -quit 2>/dev/null)
BATT=$(sed -n -e '/^POWER_SUPPLY_CAPACITY=[ ]*\([0-9]*\).*/{s//\1/p;:a' -e '$!N;$!ba' -e '}' "${BATTERY_DIR}/uevent" 2>/dev/null)

if [ -z "${BATT}" ]; then
    BATTERY_DIR=$(find /sys/class/power_supply/ \( -iname '*fuel*' -type d \) -or \( -ilname '*fuel*' -type l \) -print -quit 2>/dev/null)
    NOW=$(sed -n -e '/^POWER_SUPPLY_CHARGE_NOW=[ ]*\([0-9]*\).*/{s//\1/p;:a' -e '$!N;$!ba' -e '}' "${BATTERY_DIR}/uevent" 2>/dev/null)
    MAX=$(sed -n -e '/^POWER_SUPPLY_CHARGE_FULL=[ ]*\([0-9]*\).*/{s//\1/p;:a' -e '$!N;$!ba' -e '}' "${BATTERY_DIR}/uevent" 2>/dev/null)
    if [ -n "$NOW" ] && [ -n "$MAX" ] && [ "$MAX" -ne 0 ]; then
        BATT=$((200 * NOW / MAX % 2 + 100 * NOW / MAX))
    fi
fi

if [ -n "${BATTERY_DIR}" ]; then
    BATTREMAINING=""
    TIME_TO_EMPTY=$(sed -n -e '/^POWER_SUPPLY_TIME_TO_EMPTY_NOW=[ ]*\([0-9]*\).*/{s//\1/p;:a' -e '$!N;$!ba' -e '}' "${BATTERY_DIR}/uevent" 2>/dev/null)

    if [ -n "${TIME_TO_EMPTY}" ] && [ "${TIME_TO_EMPTY}" -gt 0 ]; then
        BATTREMAINING_HOURS=$((TIME_TO_EMPTY / 3600))
        BATTREMAINING_MINS=$((TIME_TO_EMPTY % 3600 / 60))
        [ "${BATTREMAINING_MINS}" -lt 10 ] && BATTREMAINING_MINS="0${BATTREMAINING_MINS}"
        BATTREMAINING=" (${BATTREMAINING_HOURS}:${BATTREMAINING_MINS})"
    else
        BATTREMAINING_CURRENT=$(cat "${BATTERY_DIR}/current_now" 2>/dev/null)
        BATTREMAINING_CHARGE=$(cat "${BATTERY_DIR}/charge_now" 2>/dev/null)
        if [ -n "${BATTREMAINING_CURRENT}" ] && [ "${BATTREMAINING_CURRENT}" -gt 0 ] && [ -n "${BATTREMAINING_CHARGE}" ]; then
            TIME_TO_EMPTY=$((BATTREMAINING_CHARGE * 3600 / BATTREMAINING_CURRENT))
            BATTREMAINING_HOURS=$((TIME_TO_EMPTY / 3600))
            BATTREMAINING_MINS=$((TIME_TO_EMPTY % 3600 / 60))
            [ "${BATTREMAINING_MINS}" -lt 10 ] && BATTREMAINING_MINS="0${BATTREMAINING_MINS}"
            BATTREMAINING=" (${BATTREMAINING_HOURS}:${BATTREMAINING_MINS})"
        fi
    fi
fi

### short version (for osd)
if [ "$1" = "--short" ]; then
    DT=$(date +%H:%M)
    [ -n "${BATT}" ] && echo "Battery: ${BATT}%${BATTREMAINING} - ${DT}" || echo "${DT}"
    exit 0
fi
###

V_BOARD=$(cat /boot/boot/system.board)
V_CPUNB=$(LANG=C lscpu | sed -n -e '/.*Core(s) per socket:[ ]*\(.*\)/{s//\1/p;:a' -e '$!N;$!ba' -e '}')
[ -z "${V_CPUNB}" ] && V_CPUNB=$(LANG=C lscpu | sed -n -e '/.*Core(s) per cluster:[ ]*\(.*\)/{s//\1/p;:a' -e '$!N;$!ba' -e '}')

V_CPUMAXNB=$(LANG=C lscpu | sed -n -e 's|^CPU(s):[ ]*\(.*\)|\1|p')
V_CPUMODEL1=$(sed -n -e '/^model name\t\: \(.*\)/{s//\1/p;:a' -e '$!N;$!ba' -e '}' /proc/cpuinfo 2>/dev/null)
V_SYSTEM=$(uname -rs)
# min freq : minimum freq among the max cpus ; consider only online cpus
V_CPUMINFREQ=0
V_CPUMAXFREQ=0
for CPUFREQ in $(cat /sys/devices/system/cpu/*/cpufreq/scaling_max_freq 2>/dev/null); do
    [ "$CPUFREQ" -gt "$V_CPUMAXFREQ" ] && V_CPUMAXFREQ="$CPUFREQ"
done
for CPUFREQ in $(cat /sys/devices/system/cpu/*/cpufreq/scaling_min_freq 2>/dev/null); do
    if [ "$V_CPUMINFREQ" -eq 0 ] || [ "$CPUFREQ" -lt "$V_CPUMINFREQ" ]; then
        V_CPUMINFREQ="$CPUFREQ"
    fi
done
V_CPUMINFREQ=$((V_CPUMINFREQ/1000))
V_CPUMAXFREQ=$((V_CPUMAXFREQ/1000))

V_BOARD_MODEL=$(sed -z 's|[^A-Za-z0-9]|_|g' /sys/firmware/devicetree/base/model 2>/dev/null)
[ -z "${V_BOARD_MODEL}" ] && V_BOARD_MODEL=$(sed -z 's|[^A-Za-z0-9]|_|g' /sys/devices/virtual/dmi/id/product_name 2>/dev/null)
# 3rd time lucky
if [ -z "${BOARD_MODEL}" ] || [ "${BOARD_MODEL}" = "Default_string" ]; then
    V_BOARD_MODEL=$(sed -z 's|[^A-Za-z0-9]|_|g' /sys/devices/virtual/dmi/id/board_name 2>/dev/null)
fi
[ -n "${V_BOARD_MODEL}" ] && echo "Model: ${V_BOARD_MODEL}"

echo "System: ${V_SYSTEM}"

V_ARCH=$(uname -m)
echo "Architecture: ${V_ARCH}"
[ "$V_BOARD" != "$V_ARCH" ] && echo "Board: ${V_BOARD}"

if [ -z "${V_BOARD#rpi[0-9]}" ]; then
    REVISION=$(sed -n -e 's|^Revision\t: \(.*\)$|\1|p' /proc/cpuinfo 2>/dev/null)
    [ -n "${REVISION}" ] && echo "Revision: ${REVISION}"
fi

[ -n "${V_CPUMODEL1}" ] && echo "CPU Model: ${V_CPUMODEL1}"

[ "${V_CPUMAXNB}" = "${V_CPUNB}" ] && echo "CPU Cores: ${V_CPUNB}" || echo "CPU Cores: ${V_CPUNB} / CPU Threads: ${V_CPUMAXNB}"

[ "${V_CPUMINFREQ}" != "${V_CPUMAXFREQ}" ] && echo "CPU Frequency: ${V_CPUMINFREQ}/${V_CPUMAXFREQ} MHz" || echo "CPU Max Frequency: ${V_CPUMAXFREQ} MHz"

declare -a check_cpu_features=("avx2" "sse4_1")
declare -a cpu_features=()
for feature in "${check_cpu_features[@]}"; do
    if grep -q " ${feature}" /proc/cpuinfo; then
        cpu_features+=("${feature}")
    fi
done

[ "${#cpu_features[@]}" -gt 0 ] && echo "CPU Features: " "${cpu_features[@]}"

# TDP
CPU_TDP=$(/usr/bin/system-settings-get system.cpu.tdp)
[ -n "$CPU_TDP" ] && echo "Ryzen Mobile TDP: $(ryzenadj -i | grep 'PPT LIMIT FAST' | awk '{printf "%.0f\n", $6}')W"

# temperature in millidegree Celsius
TEMPE=0
for TEMPER in $(cat /sys/devices/virtual/thermal/thermal_zone*/temp /sys/class/hwmon/hwmon*/temp*_input 2>/dev/null); do
    [ "$TEMPER" -gt "$TEMPE" ] && TEMPE="$TEMPER"
done
[ "$TEMPE" -gt 0 ] && echo "Temperature: ${TEMPE::-3}Â°C"

MEM_TOTAL_KB=$(sed -n -e 's|^MemTotal:[ ]*\([0-9]*\).*|\1|p' /proc/meminfo 2>/dev/null)
MEM_AVAILABLE_KB=$(sed -n -e 's|^MemAvailable:[ ]*\([0-9]*\).*|\1|p' /proc/meminfo 2>/dev/null)
MEM_TOTAL_MB=$((MEM_TOTAL_KB / 1024))
MEM_AVAILABLE_MB=$((MEM_AVAILABLE_KB / 1024))
echo "Available Memory: ${MEM_AVAILABLE_MB}/${MEM_TOTAL_MB} MB"

DISPLAYRES=$(regmsg currentResolution)
DISPLAYRATE=$(regmsg currentRefresh)
DISPLAYBACKEND=$(regmsg currentBackend)
echo "Display Resolution: ${DISPLAYRES}"
echo "Display Refresh Rate: ${DISPLAYRATE}"
echo "Display Backend: ${DISPLAYBACKEND}"

if [ "${FULL_DISPLAY}" != 0 ]; then
    # OPENGL
    if [ "${V_BOARD}" = "x86" ] || [ "${V_BOARD}" = "x86_64" ] || [ "${V_BOARD}" = "x86_64_v3" ]; then
        V_OPENGLVERSION=$(DISPLAY=:0.0 glxinfo 2>/dev/null | sed -n -e 's|^OpenGL core profile version string:[ ]*\(.*\)|\1|p')
        [ -z "${V_OPENGLVERSION}" ] && V_OPENGLVERSION=$(DISPLAY=:0.0 glxinfo 2>/dev/null | sed -n -e 's|^OpenGL version string:[ ]*\(.*\)|\1|p')
        echo "OpenGL Driver Version: ${V_OPENGLVERSION}"
    fi
    # VULKAN
    if [ "$(system-vulkan hasVulkan 2>/dev/null)" = "true" ]; then
        if [ "$(system-vulkan hasDiscrete 2>/dev/null)" = "true" ]; then
            echo "Vulkan Driver Name: $(system-vulkan discreteName | tr -d '\n')"
            discreteIndex=$(system-vulkan discreteIndex)
            apiVersion=$(vulkaninfo | grep -A8 "GPU$discreteIndex" | awk '/apiVersion/ {print $3}')
            echo "Vulkan Driver Version: $apiVersion"
        else
            echo "Vulkan Driver Name: $(system-vulkan listDevices | tr -d '\n')"
            apiVersion=$(vulkaninfo | grep -A8 "GPU0" | awk '/apiVersion/ {print $3}')
            echo "Vulkan Driver Version: $apiVersion"
        fi
    fi
fi

# userdata type
INTERNALDEVICE=$(system-part share)
INTERNALDEVICETYPE=$(blkid -o value -s TYPE "${INTERNALDEVICE}")
echo "Data Partition Format: ${INTERNALDEVICETYPE}"
echo "Data Partition Available Space: $(lsblk -no FSAVAIL "${INTERNALDEVICE}")"

PREFSRC=$(ifconfig | sed -n -e 's|inet 127\.0\.0\.1||' -e 's|^[ ]*inet \([0-9\.\:]*\).*|\1|p')
[ -z "$PREFSRC" ] && PREFSRC=$(ifconfig | sed -n -e 's|inet6 \:\:1||' -e 's|^[ ]*inet6 \([0-9a-fA-F\:]*\).*|\1|p')
[ -n "$PREFSRC" ] && echo "Network IP Address: $PREFSRC"

# Boot information
if [ "${FULL_DISPLAY}" != 0 ]; then
    if [ -d /sys/firmware/efi ]; then
        echo "UEFI Boot: Yes"
        [ -x /usr/bin/mokutil ] && echo "Secure Boot: $(mokutil --sb-state 2>&1 | sed 's/^SecureBoot validation is//' | paste -sd ';')"
    else
        echo "UEFI Boot: No"
    fi
fi

# battery
[ -n "${BATT}" ] && echo "Battery: ${BATT}%"

# battery health
design_energy_file="/sys/class/power_supply/BAT0/energy_full_design"
current_energy_file="/sys/class/power_supply/BAT0/energy_full"

if [ -e "$design_energy_file" ]; then
    design_energy=$(cat "$design_energy_file")
    current_energy=$(cat "$current_energy_file")

    battery_health=$(awk "BEGIN {
        health = ($current_energy / $design_energy) * 100;
        if (health > 100)
            health = 100;
        printf \"%.0f\", health
    }")

    [ -n "$battery_health" ] && echo "Battery Health: $battery_health%"
fi

# PAD Battery
for PADBAT in /sys/class/power_supply/*/device/uevent
do
    if [ -e "${PADBAT}" ]; then
        # HID devices only
        PADNAME=$(sed -nE 's/^HID_NAME=(.*)/\1/p' "${PADBAT}" 2>/dev/null)
        if [ -n "${PADNAME}" ]; then
            # Remove PID if it exists in the name
            PADNAME=$(echo "${PADNAME}" | sed -E 's/ PID:[0-9]+//')
            # parent of parent / uevent
            BATTUEVENT=$(dirname "${PADBAT}")
            BATTUEVENT=$(dirname "${BATTUEVENT}")/uevent
            BATT="$(system-padsinfo "${BATTUEVENT}")"
            echo "${PADNAME}: ${BATT}%"
        fi
    fi
done
