#!/bin/bash

log="/userdata/system/logs/display.log"

DAEMON="splash-ffplay"
DEFAULT="/usr/share/batocera/splash/splash.mp4"
SPLASH_DIR=/userdata/splash

FM_IMAGE=".*\.\(jpg\|jpeg\|png\)"
FM_VIDEO=".*\.\(mp4\|MP4\|mkv\|MKV\|webm\|WEBM\|ogv\|OGV\|avi\|AVI\)"

. /etc/profile.d/xdg.sh
. /etc/profile.d/dbus.sh

do_angels_conversion ()
{
    [[ $1 -lt 0 || $1 -gt 3 ]] && echo 0 || echo $(($1*90))
    return $?
}

do_filerandomize ()
{
    local array
    [[ -d "$SPLASH_DIR" ]] || return 1
    readarray -t array < <(find "$SPLASH_DIR" -maxdepth 1 -regex "$1" -type f)
    if [[ ${#array[@]} -gt 0 ]]; then
        echo "${array[$RANDOM % ${#array[@]}]}"
    fi
}

do_start()
{
    video_file=$(do_filerandomize "$FM_VIDEO")
    image_file=$(do_filerandomize "$FM_IMAGE")

    if [[ -n "$video_file" ]]; then
        do_videostart "$video_file"
    elif [[ -n "$image_file" ]]; then
        do_imagestart "$image_file"
    else
        do_videostart "$DEFAULT"
    fi
}

do_imagestart()
{
    image="$1"
    printf 'Image: %s: ' "$image"
    if test -e /dev/fb0
    then
        start-stop-daemon -S -b -q -m -p /var/run/user-splash-image.pid --exec fbv -- -f -i "$image"
    fi
}

do_videostart ()
{
    video="$1"
    printf 'Video: %s: ' "$video"
    ffplay_audio=

    soundDisabled=$(batocera-settings-get splash.screen.sound)
    if [[ $? -eq 0 ]]; then
	if test "${soundDisabled}" = 0
	then
            ffplay_audio=-an
	fi
    fi

    ## current drm output ##
    effectiveDrmOutput=$(for GPU in /dev/dri/card*; do batocera-drminfo "${GPU}" "current" 2>/dev/null | grep -E '^0.0:' | sed -e s+"^0.0:\([^ ]*\) .*$"+"\1"+; done | head -1)
    ffplay_video=
    video_rotation=$(batocera-settings-get-master "display.rotate.${effectiveDrmOutput}")
    if test -z "${video_rotation}"
    then
	video_rotation=$(batocera-settings-get-master display.rotate)
    fi
    if [[ $? -eq 0 ]]; then
        video_rotation=$(do_angels_conversion $video_rotation)
	# --vf-add=sub : rotation of subtitles
        [[ $? -eq 0 ]] && ffplay_video="--video-rotate=${video_rotation} --vf-add=sub"
    fi

    drm_mode="preferred"
    video_resize=$(batocera-settings-get-master splash.screen.resize)
    if [[ $? -eq 0 ]]; then
        resize=$(echo "${video_resize}" | sed "s/x/:/")
        ffplay_video="${ffplay_video} --vf=scale=${resize}"
        drm_mode=$video_resize
    fi

    video_subtitle=$(batocera-settings-get splash.screen.subtitle)
    if [[ $? -eq 0 ]]; then
	if test "${video_subtitle}" = 0
	then
           ffplay_video="${ffplay_video} -sn"
	fi
    fi

    # determine the output display to use for FFPLAY
    # fixes splash video output where the user wants it
    if preferred_display=$(batocera-settings-get global.videooutput); then
        echo "Preferred display is $preferred_display" > $log
        display_type=$(echo "$preferred_display" | cut -d'-' -f1)
        if [[ "$display_type" == "DisplayPort" ]]; then
            # workaround some cards using DisplayPort as the xorg output name
            display_type="DP"
        fi
        echo "Display Type = $display_type" >> $log
        display_index=1
        for card_folder_path in /sys/class/drm/card*; do
            card_id=$(basename "$card_folder_path")
            if [ -d "$card_folder_path" ]; then
                card_folder_name=$(basename "$card_folder_path")  
                if [[ "$card_folder_name" == card* ]]; then
                    for sub_folder in "$card_folder_path"/*; do
                        if [[ "$(basename "$sub_folder")" == "card"* ]]; then
                            status_file="${sub_folder}/status"
                            #echo "Trying for display index at path: $status_file" >> $log
                            if [ -f "$status_file" ] && [ "$(cat "$status_file")" == "connected" ] && [[ "$status_file" == *"$display_type"* ]]; then
                                echo "Display Type $display_type has a connection at $status_file" >> $log
                                #echo "Display index = $display_index" >> $log
                                drm_connector=$(echo "$status_file" | sed -n 's/.*\/card[0-9]\-\(.*\)\/status/\1/p')
                                echo "Selected DRM connector: $drm_connector" >> $log
                                card_number=$(echo "$card_id" | sed -n 's/card\([0-9]\+\).*/\1/p')
                                card_path="/dev/dri/card$card_number"
                                echo "DRM connected card path: $card_path" >> $log
                                break 2  # we found a connected display, exit both loops
                            fi
                            #echo "Display index not found at $display_index. Trying next within $card_folder_path" >> $log
                            display_index=$((display_index + 1))
                        fi
                    done
                fi
            fi
            # reset display_index to 1 for the next card folder
            #echo "Display index not found at $card_folder_path. Trying next" >> $log
            display_index=1
        done
    else
        echo "No preferred display chosen, letting FFPLAY use default" > $log
    fi

    # set the sound again due to drm init causing some cards to default to 40% volume
    VOLUME=$(/usr/bin/batocera-settings-get audio.volume)
    batocera-audio setSystemVolume "${VOLUME}"

    if [ -n "$drm_connector" ] && [ -n "$card_path" ]; then
        start-stop-daemon -S -b -q -m -p /var/run/user-splash.pid --exec /usr/bin/ffplay -- -autoexit -fs -v 0 %PLAYER_OPTIONS% $ffplay_audio $ffplay_video "$video"
# TODO --drm-mode=$drm_mode --drm-connector=$drm_connector --drm-device=$card_path --log-file=/userdata/system/logs/ffmpeg.log
    else
        start-stop-daemon -S -b -q -m -p /var/run/user-splash.pid --exec /usr/bin/ffplay -- -autoexit -fs -v 0 %PLAYER_OPTIONS% $ffplay_audio $ffplay_video "$video"
# TODO --drm-mode=$drm_mode --log-file=/userdata/system/logs/ffplay.log
    fi
}

case "$1" in
    start)
        printf 'Starting %s: ' "$DAEMON"
        if grep -qE '^[ ]*splash.screen.enabled[ ]*=[ ]*0[ ]*$' "/boot/batocera-boot.conf"
        then
            echo "SKIPPED"
            exit 0
        fi
        do_start
        echo "OK"
        ;;
    stop)
        start-stop-daemon -K -q -p /var/run/user-splash.pid
        ;;
    restart|reload)
        ;;
    *)
esac

exit $?
