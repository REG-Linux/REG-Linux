--- a/sdl2/libretro/libretro-common/rthreads/rthreads.c	2020-05-10 08:41:38.000000000 +0200
+++ b/sdl2/libretro/libretro-common/rthreads/rthreads.c	2024-05-28 08:10:00.422574102 +0200
@@ -47,18 +47,16 @@
 #include <mmsystem.h>
 #endif
 #elif defined(GEKKO)
+#include <ogc/lwp_watchdog.h>
 #include "gx_pthread.h"
 #elif defined(_3DS)
 #include "ctr_pthread.h"
-#elif defined(__CELLOS_LV2__)
-#include <pthread.h>
-#include <sys/sys_time.h>
 #else
 #include <pthread.h>
 #include <time.h>
 #endif
 
-#if defined(VITA) || defined(BSD) || defined(ORBIS)
+#if defined(VITA) || defined(BSD) || defined(ORBIS) || defined(__mips__) || defined(_3DS)
 #include <sys/time.h>
 #endif
 
@@ -95,9 +93,9 @@
 #ifdef USE_WIN32_THREADS
 /* The syntax we'll use is mind-bending unless we use a struct. Plus, we might want to store more info later */
 /* This will be used as a linked list immplementing a queue of waiting threads */
-struct QueueEntry
+struct queue_entry
 {
-   struct QueueEntry *next;
+   struct queue_entry *next;
 };
 #endif
 
@@ -117,7 +115,7 @@
    HANDLE event;
 
    /* the head of the queue; NULL if queue is empty */
-   struct QueueEntry *head;
+   struct queue_entry *head;
 
    /* equivalent to the queue length */
    int waiters;
@@ -164,7 +162,7 @@
 }
 
 /* TODO/FIXME - this needs to be implemented for Switch/3DS */
-#if !defined(SWITCH) && !defined(USE_WIN32_THREADS) && !defined(_3DS) && !defined(GEKKO) && !defined(__HAIKU__)
+#if !defined(SWITCH) && !defined(USE_WIN32_THREADS) && !defined(_3DS) && !defined(GEKKO) && !defined(__HAIKU__) && !defined(EMSCRIPTEN)
 #define HAVE_THREAD_ATTR
 #endif
 
@@ -191,27 +189,30 @@
 #endif
    bool thread_created      = false;
    struct thread_data *data = NULL;
-   sthread_t *thread        = (sthread_t*)calloc(1, sizeof(*thread));
+   sthread_t *thread        = (sthread_t*)malloc(sizeof(*thread));
 
    if (!thread)
       return NULL;
 
-   data                     = (struct thread_data*)calloc(1, sizeof(*data));
-   if (!data)
-      goto error;
+   if (!(data = (struct thread_data*)malloc(sizeof(*data))))
+   {
+      free(thread);
+      return NULL;
+   }
 
    data->func               = thread_func;
    data->userdata           = userdata;
 
+   thread->id               = 0;
 #ifdef USE_WIN32_THREADS
-   thread->thread           = CreateThread(NULL, 0, thread_wrap, data, 0, &thread->id);
+   thread->thread           = CreateThread(NULL, 0, thread_wrap,
+         data, 0, &thread->id);
    thread_created           = !!thread->thread;
 #else
-
 #ifdef HAVE_THREAD_ATTR
    pthread_attr_init(&thread_attr);
 
-   if ( (thread_priority >= 1) && (thread_priority <= 100) )
+   if ((thread_priority >= 1) && (thread_priority <= 100))
    {
       struct sched_param sp;
       memset(&sp, 0, sizeof(struct sched_param));
@@ -221,31 +222,32 @@
 
       thread_attr_needed = true;
    }
-#endif
 
 #if defined(VITA)
    pthread_attr_setstacksize(&thread_attr , 0x10000 );
    thread_attr_needed = true;
+#elif defined(__APPLE__)
+   /* Default stack size on Apple is 512Kb; 
+    * for PS2 disc scanning and other reasons, we'd like 2MB. */
+   pthread_attr_setstacksize(&thread_attr , 0x200000 );
+   thread_attr_needed = true;
 #endif
 
-#ifdef HAVE_THREAD_ATTR
    if (thread_attr_needed)
       thread_created = pthread_create(&thread->id, &thread_attr, thread_wrap, data) == 0;
    else
-#endif
       thread_created = pthread_create(&thread->id, NULL, thread_wrap, data) == 0;
 
-#ifdef HAVE_THREAD_ATTR
    pthread_attr_destroy(&thread_attr);
+#else
+   thread_created    = pthread_create(&thread->id, NULL, thread_wrap, data) == 0;
 #endif
+
 #endif
 
    if (thread_created)
       return thread;
-
-error:
-   if (data)
-      free(data);
+   free(data);
    free(thread);
    return NULL;
 }
@@ -298,6 +300,7 @@
    free(thread);
 }
 
+#if !defined(GEKKO)
 /**
  * sthread_isself:
  * @thread                  : pointer to thread object
@@ -306,16 +309,13 @@
  */
 bool sthread_isself(sthread_t *thread)
 {
-  /* This thread can't possibly be a null thread */
-  if (!thread)
-     return false;
-
 #ifdef USE_WIN32_THREADS
-   return GetCurrentThreadId() == thread->id;
+   return thread ? GetCurrentThreadId() == thread->id        : false;
 #else
-   return pthread_equal(pthread_self(),thread->id);
+   return thread ? pthread_equal(pthread_self(), thread->id) : false;
 #endif
 }
+#endif
 
 /**
  * slock_new:
@@ -327,26 +327,19 @@
  **/
 slock_t *slock_new(void)
 {
-   bool mutex_created = false;
    slock_t      *lock = (slock_t*)calloc(1, sizeof(*lock));
    if (!lock)
       return NULL;
-
 #ifdef USE_WIN32_THREADS
    InitializeCriticalSection(&lock->lock);
-   mutex_created = true;
 #else
-   mutex_created = (pthread_mutex_init(&lock->lock, NULL) == 0);
+   if (pthread_mutex_init(&lock->lock, NULL) != 0)
+   {
+      free(lock);
+      return NULL;
+   }
 #endif
-
-   if (!mutex_created)
-      goto error;
-
    return lock;
-
-error:
-   free(lock);
-   return NULL;
 }
 
 /**
@@ -396,12 +389,10 @@
 **/
 bool slock_try_lock(slock_t *lock)
 {
-   if (!lock)
-      return false;
 #ifdef USE_WIN32_THREADS
-   return TryEnterCriticalSection(&lock->lock);
+   return lock && TryEnterCriticalSection(&lock->lock);
 #else
-   return pthread_mutex_trylock(&lock->lock)==0;
+   return lock && (pthread_mutex_trylock(&lock->lock) == 0);
 #endif
 }
 
@@ -439,7 +430,6 @@
       return NULL;
 
 #ifdef USE_WIN32_THREADS
-
    /* This is very complex because recreating condition variable semantics
     * with Win32 parts is not easy.
     *
@@ -465,20 +455,15 @@
     *
     * Note: We might could simplify this using vista+ condition variables,
     * but we wanted an XP compatible solution. */
-   cond->event = CreateEvent(NULL, FALSE, FALSE, NULL);
-   if (!cond->event)
+   if (!(cond->event      = CreateEvent(NULL, FALSE, FALSE, NULL)))
       goto error;
-   cond->hot_potato = CreateEvent(NULL, FALSE, FALSE, NULL);
-   if (!cond->hot_potato)
+   if (!(cond->hot_potato = CreateEvent(NULL, FALSE, FALSE, NULL)))
    {
       CloseHandle(cond->event);
       goto error;
    }
 
    InitializeCriticalSection(&cond->cs);
-   cond->waiters = cond->wakens = 0;
-   cond->head = NULL;
-
 #else
    if (pthread_cond_init(&cond->cond, NULL) != 0)
       goto error;
@@ -515,8 +500,8 @@
 #ifdef USE_WIN32_THREADS
 static bool _scond_wait_win32(scond_t *cond, slock_t *lock, DWORD dwMilliseconds)
 {
-   struct QueueEntry myentry;
-   struct QueueEntry **ptr;
+   struct queue_entry myentry;
+   struct queue_entry **ptr;
 
 #if _WIN32_WINNT >= 0x0500 || defined(_XBOX)
    static LARGE_INTEGER performanceCounterFrequency;
@@ -526,7 +511,6 @@
    static bool beginPeriod = false;
    DWORD tsBegin;
 #endif
-
    DWORD waitResult;
    DWORD dwFinalTimeout = dwMilliseconds; /* Careful! in case we begin in the head,
                                              we don't do the hot potato stuff,
@@ -546,9 +530,7 @@
    }
 
    if (performanceCounterFrequency.QuadPart == 0)
-   {
       QueryPerformanceFrequency(&performanceCounterFrequency);
-   }
 #else
    if (!beginPeriod)
    {
@@ -571,9 +553,9 @@
 
    /* walk to the end of the linked list */
    while (*ptr)
-      ptr = &((*ptr)->next);
+      ptr       = &((*ptr)->next);
 
-   *ptr = &myentry;
+   *ptr         = &myentry;
    myentry.next = NULL;
 
    cond->waiters++;
@@ -662,7 +644,7 @@
          {
             /* It's not our turn and we're out of time. Give up.
              * Remove ourself from the queue and bail. */
-            struct QueueEntry* curr = cond->head;
+            struct queue_entry *curr = cond->head;
 
             while (curr->next != &myentry)
                curr = curr->next;
@@ -747,18 +729,17 @@
 int scond_broadcast(scond_t *cond)
 {
 #ifdef USE_WIN32_THREADS
-   /* remember: we currently have mutex */
-   if (cond->waiters == 0)
-      return 0;
-
-   /* awaken everything which is currently queued up */
-   if (cond->wakens == 0)
-      SetEvent(cond->event);
-   cond->wakens = cond->waiters;
-
-   /* Since there is now at least one pending waken, the potato must be in play */
-   SetEvent(cond->hot_potato);
+   /* Remember, we currently have mutex */
+   if (cond->waiters != 0)
+   {
+      /* Awaken everything which is currently queued up */
+      if (cond->wakens == 0)
+         SetEvent(cond->event);
+      cond->wakens = cond->waiters;
 
+      /* Since there is now at least one pending waken, the potato must be in play */
+      SetEvent(cond->hot_potato);
+   }
    return 0;
 #else
    return pthread_cond_broadcast(&cond->cond);
@@ -831,11 +812,6 @@
     * Someone asking for a 0 timeout clearly wants immediate timeout.
     * Someone asking for a 1 timeout clearly wants an actual timeout
     * of the minimum length */
-
-   /* Someone asking for 1000 or 1001 timeout shouldn't
-    * accidentally get 2ms. */
-   DWORD dwMilliseconds = timeout_us/1000;
-
    /* The implementation of a 0 timeout here with pthreads is sketchy.
     * It isn't clear what happens if pthread_cond_timedwait is called with NOW.
     * Moreover, it is possible that this thread gets pre-empted after the
@@ -846,62 +822,61 @@
    if (timeout_us == 0)
       return false;
    else if (timeout_us < 1000)
-      dwMilliseconds = 1;
-
-   return _scond_wait_win32(cond,lock,dwMilliseconds);
+      return _scond_wait_win32(cond, lock, 1);
+   /* Someone asking for 1000 or 1001 timeout shouldn't
+    * accidentally get 2ms. */
+   return _scond_wait_win32(cond, lock, timeout_us / 1000);
 #else
-   int ret;
    int64_t seconds, remainder;
-   struct timespec now = {0};
-
+   struct timespec now;
 #ifdef __MACH__
    /* OSX doesn't have clock_gettime. */
    clock_serv_t cclock;
    mach_timespec_t mts;
-
    host_get_clock_service(mach_host_self(), CALENDAR_CLOCK, &cclock);
    clock_get_time(cclock, &mts);
    mach_port_deallocate(mach_task_self(), cclock);
    now.tv_sec = mts.tv_sec;
    now.tv_nsec = mts.tv_nsec;
-#elif defined(__CELLOS_LV2__)
+#elif !defined(__PSL1GHT__) && defined(__PS3__)
    sys_time_sec_t s;
    sys_time_nsec_t n;
-
    sys_time_get_current_time(&s, &n);
-   now.tv_sec  = s;
-   now.tv_nsec = n;
+   now.tv_sec            = s;
+   now.tv_nsec           = n;
 #elif defined(PS2)
-   int tickms = clock();
-   now.tv_sec = tickms/1000;
-   now.tv_nsec = tickms * 1000;
-#elif defined(__mips__) || defined(VITA) || defined(_3DS)
+   int tickms            = ps2_clock();
+   now.tv_sec            = tickms / 1000;
+   now.tv_nsec           = tickms * 1000;
+#elif !defined(DINGUX_BETA) && (defined(__mips__) || defined(VITA) || defined(_3DS))
    struct timeval tm;
-
    gettimeofday(&tm, NULL);
-   now.tv_sec = tm.tv_sec;
-   now.tv_nsec = tm.tv_usec * 1000;
+   now.tv_sec            = tm.tv_sec;
+   now.tv_nsec           = tm.tv_usec * 1000;
 #elif defined(RETRO_WIN32_USE_PTHREADS)
    _ftime64_s(&now);
-#elif !defined(GEKKO)
-   /* timeout on libogc is duration, not end time. */
+#elif defined(GEKKO)
+   /* Avoid gettimeofday due to it being reported to be broken */
+   const uint64_t tickms = gettime() / TB_TIMER_CLOCK;
+   now.tv_sec            = tickms / 1000;
+   now.tv_nsec           = tickms * 1000;
+#else
    clock_gettime(CLOCK_REALTIME, &now);
 #endif
 
-   seconds      = timeout_us / INT64_C(1000000);
-   remainder    = timeout_us % INT64_C(1000000);
+   seconds              = timeout_us / INT64_C(1000000);
+   remainder            = timeout_us % INT64_C(1000000);
 
-   now.tv_sec  += seconds;
-   now.tv_nsec += remainder * INT64_C(1000);
+   now.tv_sec          += seconds;
+   now.tv_nsec         += remainder * INT64_C(1000);
 
    if (now.tv_nsec > 1000000000)
    {
-      now.tv_nsec -= 1000000000;
-      now.tv_sec += 1;
+      now.tv_nsec      -= 1000000000;
+      now.tv_sec       += 1;
    }
 
-   ret = pthread_cond_timedwait(&cond->cond, &lock->lock, &now);
-   return (ret == 0);
+   return (pthread_cond_timedwait(&cond->cond, &lock->lock, &now) == 0);
 #endif
 }
 
@@ -945,9 +920,9 @@
 
 uintptr_t sthread_get_thread_id(sthread_t *thread)
 {
-   if (!thread)
-      return 0;
-   return (uintptr_t)thread->id;
+   if (thread)
+      return (uintptr_t)thread->id;
+   return 0;
 }
 
 uintptr_t sthread_get_current_thread_id(void)
