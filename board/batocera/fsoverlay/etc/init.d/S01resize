#!/bin/bash

BOOTCONF="/boot/batocera-boot.conf"
LOG="/tmp/resize.log"

# only at start
test "$1" != "start" && exit 0

# true if triggers are not available or not set to do so
if ! grep -qE '^[ ]*autoresize[ ]*=[ ]*true[ ]*$' "${BOOTCONF}" && ! grep -qE '^[ ]*format-internal[ ]*=' "${BOOTCONF}"; then
	exit 0
else
	# Plymouth changed for update
	/usr/bin/plymouth change-mode --updates
fi

# Remove the trigger(s)
remove_trigger() {
	local trigger="$1"
	mount -o remount,rw /boot
	sed -i -e "s/^[ ]*${trigger}/#${trigger}/g" "${BOOTCONF}"
	mount -o remount,ro /boot
}

# UI Output with plymouth
function plymouth_output() {
	local percent="$1"
	local text="$2"

	/usr/bin/plymouth system-update --progress $percent
	/usr/bin/plymouth display-message --text="$text"
}

# Display error with timeout
function display_error() {
	/usr/bin/plymouth display-message --text="Resize Error - Please check the resize log at: /tmp/resize.log"
    	exit 1
}

# Executing parameters and watch background pid
# Changes text messages parsed to dialog --mixedgauge
function cmdoutput()
{
	local text="$3"
	local cmd="$2"
	local percent="$1"
	local pid ret

	echo "cmd:$cmd" >> "$LOG"
	$cmd >> "$LOG" 2>&1 &
	pid=$!
	plymouth_output "$percent" "$text"
	wait $pid
	ret=$?
	echo "cmd code:$ret" >> "$LOG"
	if [ $ret -ne 0 ]; then
		display_error
	fi
	return $ret
}

# only when resizing is wanted
if grep -qE '^[ ]*autoresize[ ]*=[ ]*true[ ]*$' "${BOOTCONF}"; then
	# --- BEGIN RESIZE ---

	# /userdata partition
	PART=$(batocera-part "share_internal")
	PARTNUM=$(batocera-part "share_internal_num")
	echo "Partition name: $PART & number: $PARTNUM" >> "$LOG"

	# boot disk
	DISK=$(batocera-part prefix "${PART}")
	echo "Disk = $DISK" >> "$LOG"

	# partition table
	TABLETYPE=$(parted -s ${DISK} print | grep 'Partition Table' | awk '{print $3}')
	echo "Disk partition table type = $TABLETYPE" >> "$LOG"

	# if GPT, move backup data structures to the end of the disk
	if [ "${TABLETYPE}" = "gpt" ]; then
		echo "Moving 2nd GPT table to the end of the disk" >> "$LOG"
		cmdoutput 10 "sgdisk -e ${DISK}" "Aligning GPT table..."
	fi

	# only for ext4
	PARTTYPE=$(blkid "${PART}" | sed -e s+'^.* TYPE="\([^"]*\)\".*'+'\1'+)
	test "${PARTTYPE}" != "ext4" && exit 0
	echo "Partition type = ${PARTTYPE}" >> "$LOG"

	# resize the partition
	echo "Resizing the partition to 100%" >> "$LOG"
	cmdoutput 30 "parted -s -m -f ${DISK} resizepart ${PARTNUM} 100%" "Resizing partition..."

	# update the kernel
	echo "Updating the kernel" >> "$LOG"
	cmdoutput 40 "partprobe ${DISK}" "Informing the Kernel..."

	# check & resize the ext4 file system
	if test "${PARTTYPE}" = "ext4";	then
		echo "Checking ext4 file system" >> "$LOG"
		cmdoutput 60 "e2fsck -f -p ${PART}" "Checking /userdata integrity..."

		echo "Expanding ext4 the file system" >> "$LOG"
		cmdoutput 70 "resize2fs ${PART}" "Expanding the file system..."

		echo "Checking ext4 file system" >> "$LOG"
		cmdoutput 75 "e2fsck -f -p ${PART}" "Checking ext4 file system..."
	fi

	# finally disk sync
	echo "Final sync" >> "$LOG"
	cmdoutput 80 "sync" "Syncing disk data.............."

	# remove the trigger
	cmdoutput 90 "remove_trigger autoresize"  "Removing trigger..............."
else
	###### format internal share #####
	FORMAT_INTERNAL_TYPE=$(grep -E '^[ ]*format-internal[ ]*=.*$' "${BOOTCONF}" | head -1 | sed -e s+"^[ ]*format-internal[ ]*=[ ]*\(.*\)[ ]*$"+"\1"+)
	if test -n "${FORMAT_INTERNAL_TYPE}"; then
		PART=$(batocera-part "share_internal")
		case "${FORMAT_INTERNAL_TYPE}" in
		"btrfs")
		cmdoutput 50 "mkfs.btrfs -L SHARE -f ${PART}" "Formatting to btrfs..."
		;;
		"ext4")
		cmdoutput 50 "mkfs.ext4 -L SHARE -q -F -F ${PART}" "Formatting to ext4..."
		;;
		"exfat")
		cmdoutput 50 "mkfs.exfat -n SHARE ${PART}" "Formatting to exfat..."
		;;
		*)
		# do nothing
		esac
		# remove the trigger
		cmdoutput 90 "remove_trigger format-internal" "Removing trigger..."
	fi
fi

#Cleanup, restore screen, set progress of last item to 100%
/usr/bin/plymouth system-update --progress 100

# Plymouth continues the boot
/usr/bin/plymouth change-mode --boot-up
/usr/bin/plymouth display-message --text=" "

exit 0
