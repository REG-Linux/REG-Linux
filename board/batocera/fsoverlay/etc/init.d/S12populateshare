#!/bin/bash

case "$1" in
    start)
        IN=/usr/share/reglinux/datainit
        OUT=/userdata

        rm -f /tmp/updateuserdata.lst # Make sure we start with an empty list

        # Directories deleted by user will be recreated when booting
        # the user can delete the content or add its own files
        # to reset the directory or update it, the user has to remove the directory
        # (we are unable to differenciate new files from REG-linux update from a file removed by the user)

        # Get a list of folders (or files) that do not yet exist in /userdata
        grep -Fvx -f <(cd "$OUT" || exit; find ./ -mindepth 1 -maxdepth 1 -type d) <(cd "$IN" || exit; find ./ -mindepth 1 -maxdepth 1 -type d) >> /tmp/updateuserdata.lst

        if [ -d "$OUT"/roms ]; then
            grep -Fvx -f <(cd "$OUT" || exit; find ./roms -mindepth 1 -maxdepth 1 -type d) <(cd "$IN" || exit; find ./roms -mindepth 1 -maxdepth 1 -type d) >> /tmp/updateuserdata.lst
        fi
        if [ -d "$OUT"/roms/mame ]; then
            mkdir -p "$OUT"/roms/mame/mame2003
            grep -Fvx -f <(cd "$OUT" || exit; find ./roms/mame/mame2003 \( -type f -o -xtype l \)) <(cd "$IN" || exit; find ./roms/mame/mame2003 \( -type f -o -xtype l \)) >> /tmp/updateuserdata.lst
        fi
        if [ -d "$OUT"/system ]; then
            grep -Fvx -f <(cd "$OUT" || exit; find ./system \( -type f -o -xtype l \)) <(cd "$IN" || exit; find ./system \( -type f -o -xtype l \)) >> /tmp/updateuserdata.lst
        fi

        # USUALLY ONLY NEW DIRECTORIES ARE UPDATED WHEN REG-LINUX IS UPDATED
        # but sometimes we update _info.txt, readme.txt, bios or other files.
        CURVERSION=$(cat /usr/share/reglinux/system.version)
        SHAREVERSION=$(cat /userdata/system/data.version 2>/dev/null)

        if [ "$CURVERSION" != "$SHAREVERSION" ]; then
            cd "$IN" || exit

            # Get everything, we'll use "cp -rfu"
            # -maxdepth 3 because we need to look for ./roms/mame/mame2003/*folderswithgames*/_info.txt
            if [ -d "$OUT"/roms ]; then
                find ./roms -mindepth 1 -maxdepth 3 \( -type f -o -xtype l \) \( -iname "_info.txt" -o -iname "readme.txt" \) >> /tmp/updateuserdata.lst
            fi

            # Also update bios if needed
            if [ -d "$OUT"/bios ]; then
                find ./bios \( -type f -o -xtype l \) >> /tmp/updateuserdata.lst
            fi
            if [ -d "$OUT"/roms/iortcw ]; then
                find ./roms/iortcw/main \( -type f -o -xtype l \) >> /tmp/updateuserdata.lst
            fi

            # And REG-linux system configs, services but do not update user settings.
            if [ -d "$OUT"/system ]; then
                find ./system \( -type f -o -xtype l \) \( ! -iname "es_settings.cfg" -a ! -iname "es_input.cfg" -a ! -iname "system.conf" \) >> /tmp/updateuserdata.lst
            fi
        fi

        CURRENTSTEP=0
        TOTALSTEPS=$(grep -c ".*" /tmp/updateuserdata.lst 2>/dev/null || echo "0")
        if [ "$TOTALSTEPS" -gt 0 ]; then

            ((TOTALSTEPS+=4))           # Add the last steps to correctly show progress bar
            ((CURRENTSTEP+=100))        # STEP * 100 for percentage

            # Start UPDATING splash
            /usr/bin/plymouth change-mode --updates
            /usr/bin/plymouth --show-splash
            /usr/bin/plymouth system-update --progress "$((CURRENTSTEP / TOTALSTEPS))"
            /usr/bin/plymouth display-message --text="Creating missing folders"

            # Create needed folders in /userdata
            sed 's#/[^/]*$##;/^\.$/d;s#^\./##' /tmp/updateuserdata.lst | sort -u |
                while IFS= read -r SUBDIR; do
                    mkdir -p "${OUT}/$SUBDIR"
                done

            # Copy files
            while IFS= read -r FILE; do
                cp -rfu "${IN}/$FILE" "${OUT}/${FILE%/*}/"
                ((CURRENTSTEP+=100))
                /usr/bin/plymouth system-update --progress "$((CURRENTSTEP / TOTALSTEPS))"
                /usr/bin/plymouth display-message --text="Copying files: $FILE"
            done < <(sed 's#^\./##' /tmp/updateuserdata.lst)

            ((CURRENTSTEP+=100))
            /usr/bin/plymouth system-update --progress "$((CURRENTSTEP / TOTALSTEPS))"
            /usr/bin/plymouth display-message --text="Creating special folders and links"
        fi

        # ssh : create directory for SSH user data (including identity keys, authorized_keys, known_hosts)
        mkdir -p -m 0700 /userdata/system/.ssh

        # udev : create a link for rules persistance
        mkdir -p /userdata/system/udev/rules.d
        rm -rf /run/udev/rules.d
        ln -s /userdata/system/udev/rules.d/ /run/udev/

        # and add the machine-id
        [ -e /userdata/system/machine-id ] || dbus-uuidgen --ensure=/userdata/system/machine-id
        ln -sf /userdata/system/machine-id /var/lib/dbus/machine-id
        ln -sf /userdata/system/machine-id /etc/machine-id

        # Save to avoid to redo some steps every boot
        [ "$CURVERSION" != "$SHAREVERSION" ] && cp /usr/share/reglinux/system.version /userdata/system/data.version

        # call user script with start condition
        if [ -e /boot/postshare.sh ]; then
            if [ "$TOTALSTEPS" -gt 0 ]; then
                ((CURRENTSTEP+=100))
                /usr/bin/plymouth system-update --progress "$((CURRENTSTEP / TOTALSTEPS))"
                /usr/bin/plymouth display-message --text="Running postshare script"
            fi
            bash /boot/postshare.sh start
        fi

        if [ "$TOTALSTEPS" -gt 0 ]; then
            /usr/bin/plymouth system-update --progress 100
            /usr/bin/plymouth display-message --text=" "
            /usr/bin/plymouth change-mode --boot-up
            /usr/bin/plymouth --show-splash
        fi
    ;;
    stop)
        # call user script with stop condition
        [ -e /boot/postshare.sh ] && bash /boot/postshare.sh stop
    ;;
esac

